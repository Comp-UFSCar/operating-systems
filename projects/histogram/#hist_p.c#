#include <stdio.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>


//
// `hist_p.min_in`
//
// Compute minimum value in a vector.
//
//
// Parameters
// ----------
// vector : double *
//          Vector which contains the elements to be checked.
//
// n_vector : int
//            Number of elements in `vector`.
//
double
min_in(double *vector, int n_vector)
{
  int i;
  double value = vector[0];

  for (i = 1; i < length; i++)
    if (vector[i] < value) value = vector[i];

  return value;
}


//
// `hist_p.max_in`
//
// Compute maximum value in a vector.
//
//
// Parameters
// ----------
// vector : double *
//          Vector which contains the elements to be checked.
//
// n_vector : int
//            Number of elements in `vector`.
//
double
max_in(double *vector, int n_vector)
{
  int i;
  double value = vector[0];

  for (i = 1; i < length; i++)
    if (vector[i] > value) value = vector[i];

  return value;
}


//
// `hist_p.histogram`
//
// Fill `n_bins` `bins` with the count of elements in `vector`
// that belongs to a certain range previously specified.
//
//
// Parameters
// ----------
// vector : double *
//          Vector containing the elements to be counted.
//
// n_vector : int
//            Number of elements in `vector`.
//
// min : double
//       Minimum value to be counted.
//
// max : double
//       Maximum value to be counted.
//
// bins : int *
//        The bins that will be filled with the count of elements in `vector`.
//
// n_bins : int
//          The number of bins in the `bins` vector.
//
void
histogram(int *vector, int n_vector, double min, double max, int *bins, int n_bins)
{
  int i, j, count;
  double min_t, max_t;

  double h = (max-min) / n_vector;

  for(j = 0; j < n_bins; j++)
  {
    count = 0;
    min_t = min + j*h;
    max_t = min + (j+1)*h;
		
    for(i = 0; i < n_vector; i++)
      if(vector[i] > min_t && vector[i] < max_t) count++;

    bins[j] = count;
  }
}


//
// Main.
//
int
main(int argc, char * argv[])
{
  double h, *values, max, min;
  int n_bins, n_values, i, *bins, n_threads;
  long unsigned int elapsed;
  struct timeval start, end;

  scanf("%d", &n_threads);
  scanf("%d", &n_values);
  scanf("%d", &n_bins);

  values = (double *) malloc(n_vector * sizeof(double));
  bins = (int *) malloc(n_bins * sizeof(int));
  
  for(i = 0; i < n_values; i++) scanf("%lf", &values[i]);
  
  min = floor(min_in(values, n_values));
  max = ceil(max_in(values, n_values));

  gettimeofday(&start, NULL);

  histogram(values, n_values, min, max, bins, n_bins);

  gettimeofday(&end, NULL);

  elapsed = ((end.tv_sec * 1000000 + end.tv_usec) - \
            (start.tv_sec * 1000000 + start.tv_usec));

  printf("%.2lf", min);	
  for(i = 1; i <= n_bins; i++) printf(" %.2lf", min + h * i);
  printf("\n");

  printf("%d",vet[0]);
  for(i = 1; i < n; i++) printf(" %d", bins[i]);
  printf("\n");

  printf("%lu\n", elapsed);

  free(va);
  free(val);

	return 0;
}
